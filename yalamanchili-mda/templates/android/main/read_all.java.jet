<java:format>
package ${$groupID}.android.${$package/@name}.${lower-case($class/@name)};


import info.yalamanchili.project.android.HttpHelper;
import info.yalamanchili.project.android.R;
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
		<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										<%-- check to see if class2 is parent and child--%>
										<c:if test="not($class2/@parent1 = $class2/@name)">
										<c:if test="not($class2/@hasChildren = $class2/@name)">
									import	${$groupID}.entity.${$package/@name}.${$class2/@name};
										</c:if>
										<%-- has parent and no children--%>
										<c:if test="$class2/@hasChildren = $class2/@name">
										import	${$groupID}.entity.${$package/@name}.${$class2/@name};
										</c:if>
										</c:if>
										<%-- no parent and has children--%>
										 <c:if test="$class2/@parent1 = $class2/@name">
										 <c:if test="not($class2/@hasChildren = $class2/@name)">
										import	${$groupID}.entity.${$package/@name}.${$class2/@name};
										 </c:if>
										 </c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>

import java.util.ArrayList;
import java.util.List;
import ${$groupID}.android.AsyncHttp;

import android.widget.Button;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.view.View.OnClickListener;

public class ReadAll${$class/@name}s extends Activity implements OnItemClickListener,OnClickListener{
	private Integer pageOffSet = 0;
	private ArrayList<${$class/@name}> ${lower-case($class/@name)}s = new ArrayList<${$class/@name}>();
	private ListView ${lower-case($class/@name)}ListView;
	private Button create;
	private Button more;
	private ${$class/@name}Adapter ${lower-case($class/@name)}Adapter;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.entity_readall);
		create = (Button) findViewById(R.id.readall_create);
		more = (Button) findViewById(R.id.readall_more);
		create.setOnClickListener(this);
		more.setOnClickListener(this);
		${lower-case($class/@name)}ListView = (ListView) findViewById(R.id.readall_listview);
		${lower-case($class/@name)}ListView.setOnItemClickListener(this);
		int resID = R.layout.readall_list;
		${lower-case($class/@name)}Adapter = new ${$class/@name}Adapter(ReadAll${$class/@name}s.this, resID, ${lower-case($class/@name)}s);
		${lower-case($class/@name)}ListView.setAdapter(${lower-case($class/@name)}Adapter);
		loadPage();
	}

	public void onItemClick(AdapterView<?> parent, View arg1, int position,
			long id) {
		${$class/@name} ${lower-case($class/@name)} = (${$class/@name}) parent.getItemAtPosition(position);
		Intent intent = new Intent(this, Read${$class/@name}.class);
		intent.putExtra("id", ${lower-case($class/@name)}.getId());
		startActivity(intent);
	}

	
	public String getReadALLURL() {
	return HttpHelper.baseURL + "${lower-case($class/@name)}/readall/" + pageOffSet.toString()
				+ "/" + getString(R.string.page_size);
	}
	
	public void onClick(View arg0) {
		<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										<%-- check to see if class2 is parent and child--%>
										<c:if test="not($class2/@parent1 = $class2/@name)">
										<c:if test="not($class2/@hasChildren = $class2/@name)">
										if (arg0.getId() == create.getId()) {
										Object result = getIntent().getSerializableExtra("parent");
											if (result != null) {
												Intent addIntent = new Intent(this, Create${$class/@name}.class);
												${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
												${lower-case($class/@name)}.set${$class2/@name}((${$class2/@name}) result);
												addIntent.putExtra("entity", ${lower-case($class/@name)});
												startActivity(addIntent);
												return;
											}
											}
										</c:if>
										<%-- has parent and no children--%>
										<c:if test="$class2/@hasChildren = $class2/@name">
										if (arg0.getId() == create.getId()) {
										Object result = getIntent().getSerializableExtra("parent");
											if (result != null) {
												Intent addIntent = new Intent(this, Create${$class/@name}.class);
												${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
												${lower-case($class/@name)}.set${$class2/@name}((${$class2/@name}) result);
												addIntent.putExtra("entity", ${lower-case($class/@name)});
												startActivity(addIntent);
												return;
											}
											}
										</c:if>
										</c:if>
										<%-- no parent and has children--%>
										 <c:if test="$class2/@parent1 = $class2/@name">
										 <c:if test="not($class2/@hasChildren = $class2/@name)">
										 if (arg0.getId() == create.getId()) {
										Object result = getIntent().getSerializableExtra("parent");
											if (result != null) {
												Intent addIntent = new Intent(this, Create${$class/@name}.class);
												${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
												${lower-case($class/@name)}.set${$class2/@name}((${$class2/@name}) result);
												addIntent.putExtra("entity", ${lower-case($class/@name)});
												startActivity(addIntent);
												return;
											}
											}
										 </c:if>
										 </c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
		if (arg0.getId() == create.getId()) {
		Intent createIntent = new Intent(this, Create${$class/@name}.class);
		startActivity(createIntent);
		}
		if (arg0.getId() == more.getId()) {
			loadPage();
		}
	}
	
	protected void loadPage() {
		${lower-case($class/@name)}Adapter.clear();
		new AsyncHttp(this) {
			@Override
			protected void onResponse(String result) {
				Object obj = HttpHelper.xstream.fromXML(result);
				if (obj instanceof List<?>) {
					for (${$class/@name} entity : (List<${$class/@name}>) HttpHelper.xstream
							.fromXML(result)) {
						${lower-case($class/@name)}Adapter.add(entity);
					}
				}
			}
		}.execute(getReadALLURL());
		pageOffSet = pageOffSet + new Integer(getString(R.string.page_size));
	}
}
</java:format>