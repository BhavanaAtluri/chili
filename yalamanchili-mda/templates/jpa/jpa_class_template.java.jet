
<java:format>

<f:bundle basename="templates/resources/messages">

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--This is used to check for inhereritance --%>
<c:setVariable select="$class/@name" var="parentClass"/>
<c:setVariable select="$class/@name" var="isParentClass"/>


package ${$packageName};
 
<java:importsLocation package="{$package/@name}"/>
import info.yalamanchili.gwt.ui.Position;
import info.yalamanchili.gwt.ui.UIElement;

import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import info.yalamanchili.commons.ReflectionUtils;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.ManyToMany;
import javax.persistence.OneToOne;
import javax.persistence.ManyToOne;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;

import net.sf.gilead.pojo.java5.LightEntity;

import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.hibernate.validator.Past;
import org.hibernate.validator.Range;
import org.hibernate.validator.Length;
import org.hibernate.validator.Email;
import org.hibernate.validator.Future;
import org.hibernate.validator.Max;
import org.hibernate.validator.Min;
import org.hibernate.validator.NotEmpty;
<%-- Check inheritance support--%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization">
 <%-- if parent class--%>
	<c:if test="$generalization/Generalization.parent/Class/@xmi.idref = $classID">
	<c:setVariable select="$generalization/Generalization.parent/Class/@xmi.idref" var="isParentClass"/>
	<%-- check to see no other class uses this as a child--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization2">
				<c:if test="$generalization2/Generalization.child/Class/@xmi.idref = $classID">
					<c:setVariable select="$generalization/Generalization.child/Class/@xmi.idref" var="isParentClass"/>
				</c:if>
			</c:iterate>
		
	</c:if>
 <%-- if child class--%>
	<c:if test="$generalization/Generalization.child/Class/@xmi.idref = $classID">
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="otherClass">
  			<c:if test="$otherClass/@xmi.id = $generalization/Generalization.parent/Class/@xmi.idref">
  			<c:setVariable select="$otherClass/@name" var="parentClass"/>
  			</c:if>
		</c:iterate>  					  		 			 
	</c:if>
</c:iterate>

<f:message>generated.comment</f:message>
<c:if test="$isParentClass = $classID">
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
</c:if> 

@Entity
public <c:if test="$class/@isAbstract = 'true'">abstract</c:if> class ${$class/@name}  <c:choose select="$parentClass" > <c:when test="$class/@name" > extends  LightEntity </c:when> <c:otherwise> extends ${$parentClass}</c:otherwise>  </c:choose> <c:if test="$class/@isAbstract = 'false'">implements Serializable</c:if>{
/** @generated */
private static final long serialVersionUID = 1L;

<%-- if this is not a child class--%> 
 <c:choose select="$parentClass" > 
 	<c:when test="$class/@name" > <f:message>generated.comment</f:message>
	@Id
	@GeneratedValue
	protected Long id; 
	</c:when>
	 <c:otherwise> 
	 </c:otherwise> 
 </c:choose>

 


<%-- Process annotations on the primitive datatypes--%>
<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
<f:message>generated.comment</f:message>
<%-- processes yalamanchili gwt tags Tag--%>
	<c:iterate select="$attribute/ModelElement.stereotype/Stereotype" var="stereotype">
		<%-- If UIElement--%>
		<c:if test="$stereotype/@href = ${'$UIElementID'}">
			<c:iterate select="$attribute/ModelElement.taggedValue" var="taggedvalue">
				<c:iterate select="$taggedvalue/TaggedValue" var="subtag">
				<%-- If POSITION TAG--%>
					<c:if test="$subtag/TaggedValue.type/TagDefinition/@href = ${'$PositionID'}">
@UIElement(position = Position.${$subtag/TaggedValue.dataValue})			
					</c:if>
				</c:iterate>
			</c:iterate>
		</c:if>
		<c:if test="$stereotype/@href = ${'$LengthID'}">
			<c:iterate select="$attribute/ModelElement.taggedValue" var="taggedvalue">
				<c:iterate select="$taggedvalue/TaggedValue" var="subtag1">
				<%-- If MIN length TAG--%>
					<c:if test="$subtag1/TaggedValue.type/TagDefinition/@href = ${'$minID'}">
						<c:iterate select="$taggedvalue/TaggedValue" var="subtag2">
							<%-- If MAX length TAG--%>
							<c:if test="$subtag2/TaggedValue.type/TagDefinition/@href = ${'$maxID'}">
@Length(min=${$subtag1/TaggedValue.dataValue},max=${$subtag2/TaggedValue.dataValue})	
							</c:if>
						</c:iterate>
		
					</c:if>
				</c:iterate>
			</c:iterate>
		</c:if>
		<c:if test="$stereotype/@href = ${'$RangeID'}">
			<c:iterate select="$attribute/ModelElement.taggedValue" var="taggedvalue">
				<c:iterate select="$taggedvalue/TaggedValue" var="subtag1">
				<%-- If MIN length TAG--%>
					<c:if test="$subtag1/TaggedValue.type/TagDefinition/@href = ${'$minID'}">
						<c:iterate select="$taggedvalue/TaggedValue" var="subtag2">
							<%-- If MAX length TAG--%>
							<c:if test="$subtag2/TaggedValue.type/TagDefinition/@href = ${'$maxID'}">
@Range(min=${$subtag1/TaggedValue.dataValue},max=${$subtag2/TaggedValue.dataValue})	
							</c:if>
						</c:iterate>
		
					</c:if>
				</c:iterate>
			</c:iterate>
		</c:if>	
							
		<c:if test="$stereotype/@href = ${'$NotNullID'}">
@NotNull
		</c:if>
		<c:if test="$stereotype/@href = ${'$NotEmptyID'}">
@NotEmpty
		</c:if>
		<c:if test="$stereotype/@href = ${'$PastID'}">
@Past
		</c:if>
		<c:if test="$stereotype/@href = ${'$FutureID'}">
@Future
		</c:if>
						
	</c:iterate>
	
<%-- processes the premitive Datatypes and enums--%>
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" > protected String </c:when> <c:when test="${'$IntegerID'}" > protected Integer </c:when><c:when test="${'$DateID'}" > protected Date </c:when><c:when test="${'$BooleanID'}" >protected  Boolean </c:when><c:when test="${'$LongID'}" > protected Long </c:when><c:when test="${'$FloatID'}" > protected Float </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			@Enumerated(EnumType.STRING)
	 			protected  ${$enumeration/@name} 
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
</c:choose> 
${$attribute/@name};

</c:iterate>



<%-- collections Datatypes --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">

	<c:iterate select="$association/Association.connection" var="association_connection">
	
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			
  <f:message>generated.comment</f:message>		
  										<%-- check to see the association is navigable in the first case--%>
  										<c:if test="$association_connection_end2/@isNavigable = 'true'">			  		 			
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check if the multiplicityis one to one--%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--check the relations--%>
  					    							<%-- Composite @ManyToOne--%>
  					    							
  					    							<c:if test="$association_connection_end2/@aggregation = 'composite'">
 @ManyToOne 					    							
  					    							</c:if>  
  					    							<%-- Aggregate @ManyToOne--%>
  					    							<c:if test="$association_connection_end2/@aggregation = 'aggregate'">
 @ManyToOne 					    							
  					    							</c:if> 
 													<%-- Association OneToOne or OneToMany--%>
   					    							<c:if test="$association_connection_end2/@aggregation = 'none'">
  					    								<%-- check for one or many realations--%>
  					    								<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    									<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
 @OneToOne 					    				
				    										</c:if>
				    									</c:if>
  					    								<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					    									<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
 @ManyToOne 					    				
				    										</c:if>
				    									</c:if>		    							
  					    							</c:if> 
 										
 protected 	${$class2/@name}  ${lowercaseFirst($class2/@name)};
  					  		 					</c:if>  
  					  		 			</c:if>
  					  		 		
  					  		 			
  										 <%-- check if the multiplicityis one to many--%>
   					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
   					    						<%--check the relations--%>
  					    							<%-- Composite @ManyToOne--%>
  					    							
  					    							<c:if test="$association_connection_end/@aggregation = 'composite'">
 @OneToMany(mappedBy="${lowercaseFirst($class/@name)}", cascade = CascadeType.ALL)	
  protected 	List<${$class2/@name}>  ${lowercaseFirst($class2/@name)}s;				    							
  					    							</c:if>  
  					    							<%-- Aggregate @ManyToOne--%>
  					    							<c:if test="$association_connection_end/@aggregation = 'aggregate'">
 @OneToMany(mappedBy="${lowercaseFirst($class/@name)}")	
  protected 	List<${$class2/@name}>  ${lowercaseFirst($class2/@name)}s;		    							
  					    							</c:if> 
  					    							<%-- Association OneToOne or OneToMany--%>
   					    							<c:if test="$association_connection_end/@aggregation = 'none'">
  					    								<%-- check for one or many realations--%>
  					    								<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    									<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
 @OneToMany (mappedBy="${lowercaseFirst($class/@name)}")	
  protected 	List<${$class2/@name}>  ${lowercaseFirst($class2/@name)}s;			    				
				    										</c:if>
				    									</c:if>
  					    								<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					    									<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
 @ManyToMany 	
  protected 	Set<${$class2/@name}>  ${lowercaseFirst($class2/@name)}s;				    				
				    										</c:if>
				    									</c:if>		    							
  					    							</c:if> 
  					  		 					</c:if>  
  					  		 			</c:if>
  					  		 			
  					  		 			
  					  		 			</c:if>	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
</c:iterate>

<%-- constructor --%>
<c:if test="$class/@isAbstract = 'false'">
<f:message>generated.comment</f:message>
public ${$class/@name}() {
super();   
}
</c:if> 
 <c:choose select="$parentClass" > 
 	<c:when test="$class/@name" > <f:message>generated.comment</f:message>
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	</c:when>
	 <c:otherwise> 
	 </c:otherwise> 
 </c:choose>

	
<%-- getters and setters --%>
<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
	<%--getters for basic attributes --%>
	<f:message>generated.comment</f:message>
	public  <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >  <c:when test="${'$StringID'}" >String</c:when> <c:when test="${'$IntegerID'}" >Integer</c:when><c:when test="${'$DateID'}" >Date</c:when><c:when test="${'$BooleanID'}" >Boolean</c:when><c:when test="${'$LongID'}" > Long </c:when><c:when test="${'$FloatID'}" >Float</c:when> <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			 ${$enumeration/@name} 
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise> </c:choose> get${uppercaseFirst($attribute/@name)}(){
	return ${$attribute/@name};
	}
	<f:message>generated.comment</f:message>
	public void set${uppercaseFirst($attribute/@name)}(<c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" >String</c:when> <c:when test="${'$IntegerID'}" >Integer</c:when><c:when test="${'$DateID'}" >Date</c:when><c:when test="${'$BooleanID'}" >Boolean</c:when><c:when test="${'$LongID'}" > Long </c:when><c:when test="${'$FloatID'}" >Float</c:when><c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			 ${$enumeration/@name} 
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise> </c:choose> <c:get select="$attribute/@name" />){
	this.${$attribute/@name}=${$attribute/@name};
	}
	
</c:iterate>
<%-- colletions getters and setters-->
<%--getters for collection attributes --%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
	
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			
  					  		 			<%-- check to see the association is navigable in the first case--%>
  										<c:if test="$association_connection_end2/@isNavigable = 'true'">		
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check if target is one side--%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
<%-- gettter returning a non collection--%>
 													
 public 	${$class2/@name} get${$class2/@name}() {
 return  this.${lowercaseFirst($class2/@name)};
 }
<%-- setter returning a non clooection--%>
  public 	void set${$class2/@name}(${$class2/@name} ${lowercaseFirst($class2/@name)}) {
   this.${lowercaseFirst($class2/@name)}=${lowercaseFirst($class2/@name)};
 }
 
  					  		 					</c:if>  
  					  		 			</c:if>
  					  		 			
  										 <%-- check if target is many side--%>
   					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
   		
	 										<%-- check if source is many side--%>
	 										<%-- this is a many to many--%>
	 										<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
	  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
	  					    						<%-- gettter returning a collection--%>				    											    									    						
														 public 	Set<${$class2/@name}>  get${$class2/@name}s(){
														 if(this.${lowercaseFirst($class2/@name)}s==null){
														 return new HashSet<${$class2/@name}>();
														 }
														 return this.${lowercaseFirst($class2/@name)}s;
														 }
														<%-- setter returning a collection--%>	
														 public 	  void set${$class2/@name}s(Set<${$class2/@name}> ${lowercaseFirst($class2/@name)}s){
														 this.${lowercaseFirst($class2/@name)}s=${lowercaseFirst($class2/@name)}s;
	 }													<%-- addEntity methods--%>
	  					    						 public 	  void add${$class2/@name}(${$class2/@name} entity){
														  if(entity== null){
														  return;
														  }
														 get${$class2/@name}s().add(entity);
														 }
	  					    						</c:if>  
	  					  		 			</c:if>
	  					  		 			<%-- check if source is one side--%>
	  					  		 			<%-- this is a one to many--%>
	  					  		 			<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
	  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
	  					    						<%-- gettter returning a collection--%>				    											    									    						
														 public 	List<${$class2/@name}>  get${$class2/@name}s(){
														 if(this.${lowercaseFirst($class2/@name)}s==null){
														 return new ArrayList<${$class2/@name}>();
														 }
														 return this.${lowercaseFirst($class2/@name)}s;
														 }
														<%-- setter returning a collection--%>	
														 public 	  void set${$class2/@name}s(List<${$class2/@name}> ${lowercaseFirst($class2/@name)}s){
														 this.${lowercaseFirst($class2/@name)}s=${lowercaseFirst($class2/@name)}s;
														 }
	  					    						 <%-- addEntity methods--%>
														  public 	  void add${$class2/@name}(${$class2/@name} entity){
														   if(entity== null){
														  return;
														  }
														 get${$class2/@name}s().add(entity);
														 entity.set${$class/@name}(this);
														 }
	  					    						</c:if>  
	  					  		 			</c:if>
  					
				  		 					</c:if>  
  					  		 			</c:if>
  					  		 			
  					  		 			</c:if> 
  					  		 			</c:if>
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>

</c:iterate>

	@Override
	public String toString() {
		return ReflectionUtils.toStringRef(this);
	}


}
</f:bundle>
</java:format>