<java:format>
<c:setVariable select="$class/@xmi.id" var="classID"/>
package ${$groupID}.rest.${$package/@name};
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
<c:if test="$enableHibernateSearch = 'true'">
import info.yalamanchili.commons.DataType;
import info.yalamanchili.commons.ReflectionUtils;
import info.yalamanchili.commons.SearchUtils;
import ${$groupID}.rest.GileadService;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.hibernate.search.jpa.FullTextEntityManager;
import org.hibernate.search.jpa.Search;
</c:if>
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
																	import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.Transactional;
import org.jboss.seam.annotations.Create;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;
import org.jboss.seam.annotations.security.Restrict;
import com.thoughtworks.xstream.XStream;
import info.yalamanchili.mapper.BeanMapper;

@Name("${$class/@name}Resource")
@Path("/crud/${lower-case($class/@name)}")
@Scope(ScopeType.STATELESS)
@Transactional
public class ${$class/@name}Service extends GileadService{

protected XStream xstream = new XStream();

	@In(create = true)
	protected EntityManager em;
	

	@GET
	@Path("/read/{id}")
	@Produces("application/xml")
	//@Restrict("#{s:hasRole('user')}")
	public String read(@PathParam("id") Long id) {
		${$class/@name} ${lower-case($class/@name)} = em.find(${$class/@name}.class, id);
		if(${lower-case($class/@name)} ==null){
		return xstream.toXML("null");
		}
		else{
		return xstream.toXML(beanManager.clone(${lower-case($class/@name)}));
		}
	}

	@Produces("application/xml")
	@Consumes("application/xml")
	@PUT
	@Path("/create")
	//@Restrict("#{s:hasRole('admin')}")
	public String create(String entity) {
		${$class/@name} ${lower-case($class/@name)} = (${$class/@name}) xstream.fromXML(entity);
		return xstream.toXML(beanManager.clone(em.merge(${lower-case($class/@name)})));
	}

	@Produces("application/xml")
	@Consumes("application/xml")
	@PUT
	@Path("/update")
	//@Restrict("#{s:hasRole('admin')}")
	public String update(String entity) {
		${$class/@name} ${lower-case($class/@name)} = (${$class/@name}) xstream.fromXML(entity);
		return xstream.toXML(beanManager.merge((${lower-case($class/@name)})));
	}

	@DELETE
	@Path("/delete/{id}")
	//@Restrict("#{s:hasRole('admin')}")
	public void delete(@PathParam("id") String id) {
		em.remove(em.find(${$class/@name}.class, id));
	}

	@GET
	@Produces("application/xml")
	@Path("/readall/{offset}/{limit}")
	public String readAll(@PathParam("offset") int offset,
			@PathParam("limit") int limit) {
		List<${$class/@name}> results = new ArrayList<${$class/@name}>();
		String query = "from " + ${$class/@name}.class.getCanonicalName();
		Query getEntitites = em.createQuery(query);
		getEntitites.setFirstResult(offset);
		getEntitites.setMaxResults(limit);
		for (Object ${lower-case($class/@name)} : getEntitites.getResultList()) {
			results.add((${$class/@name}) beanManager.clone(${lower-case($class/@name)}));
		}
		if(results.size() ==0){
		return xstream.toXML("null");
		}
		else{
		return xstream.toXML(results);
		}
	}
	
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			@GET
																	@Path("/read/{id}/${lower-case($class2/@name)}s")
																	@Produces("application/xml")
																	public String get${$class2/@name}s(@PathParam("id") Long id) {
																		${$class/@name} ${lower-case($class/@name)} = em.find(${$class/@name}.class, id);
																		List<${$class2/@name}> ${lower-case($class2/@name)}s = new ArrayList<${$class2/@name}>();
																		for (${$class2/@name} entity : ${lower-case($class/@name)}.get${$class2/@name}s()) {
																			${lower-case($class2/@name)}s.add((${$class2/@name}) beanManager.clone(entity));
																		}
																		if(${lower-case($class2/@name)}s.size() ==0){
																			return xstream.toXML("null");
																			}
																			else{
																			return xstream.toXML(${lower-case($class2/@name)}s);
																			}
																	}
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			@GET
																	@Path("/read/{id}/${lower-case($class2/@name)}s")
																	@Produces("application/xml")
																	public String get${$class2/@name}s(@PathParam("id") Long id) {
																		${$class/@name} ${lower-case($class/@name)} = em.find(${$class/@name}.class, id);
																		List<${$class2/@name}> ${lower-case($class2/@name)}s = new ArrayList<${$class2/@name}>();
																		for (${$class2/@name} entity : ${lower-case($class/@name)}.get${$class2/@name}s()) {
																			${lower-case($class2/@name)}s.add((${$class2/@name}) beanManager.clone(entity));
																		}
																		if(${lower-case($class2/@name)}s.size() ==0){
																			return xstream.toXML("null");
																			}
																			else{
																			return xstream.toXML(${lower-case($class2/@name)}s);
																			}
																	}
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 										  					  		 			@GET
																	@Path("/read/{id}/${lower-case($class2/@name)}s")
																	@Produces("application/xml")
																	public String get${$class2/@name}s(@PathParam("id") Long id) {
																		${$class/@name} ${lower-case($class/@name)} = em.find(${$class/@name}.class, id);
																		List<${$class2/@name}> ${lower-case($class2/@name)}s = new ArrayList<${$class2/@name}>();
																		for (${$class2/@name} entity : ${lower-case($class/@name)}.get${$class2/@name}s()) {
																			${lower-case($class2/@name)}s.add((${$class2/@name}) beanManager.clone(entity));
																		}
																		if(${lower-case($class2/@name)}s.size() ==0){
																			return xstream.toXML("null");
																			}
																			else{
																			return xstream.toXML(${lower-case($class2/@name)}s);
																			}
																	}
  					  		 			
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>	
	
	
	@GET
	@Produces("application/xml")
	@Path("/count")
	public String count() {
		String query = "select count(entity) from "
				+ ${$class/@name}.class.getCanonicalName() + " entity";
		Query getEntitiesSize = em.createQuery(query);
		Long count = (Long) getEntitiesSize.getSingleResult();
		return count.toString();

	}
<c:if test="$enableHibernateSearch = 'true'">
	@GET
	@Produces("application/xml")
	@Path("/search/{searchText}")
	public String search(@PathParam("searchText") String searchText) {
		List<${$class/@name}> results = new ArrayList<${$class/@name}>();
		FullTextEntityManager ftem = Search.getFullTextEntityManager(em);
		org.apache.lucene.search.Query luceneQuery = SearchUtils
				.getLuceneQuery(searchText, "id", new StandardAnalyzer(),
						ReflectionUtils.getBeanProperties(${$class/@name}.class,
								DataType.STRING));
		Query query = ftem.createFullTextQuery(luceneQuery, ${$class/@name}.class);
		for (Object obj : query.getResultList()) {
			results.add((${$class/@name}) beanManager.clone(obj));
		}
		return xstream.toXML(results);
	}
</c:if>		

}
</java:format>