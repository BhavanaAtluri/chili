<java:format>
package ${$packageName}.test;

import static org.junit.Assert.assertTrue;
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.thoughtworks.selenium.DefaultSelenium;

public class ${$class/@name}Test {
		protected static DefaultSelenium selenium;
	protected static String url = "http://localhost:8088/";

	protected static ${$class/@name} ${lower-case($class/@name)};

	@BeforeClass
	public static void init() {
		selenium = new DefaultSelenium("localhost", 5555, "*firefox", url);
		selenium.start();
		selenium
				.open("/automanage-webapp/info.yalamanchili.project.automanage/automanage.html");
		selenium.waitForPageToLoad("50000");
		${lower-case($class/@name)} = new ${$class/@name}();
		<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}("test"); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(new Integer(1)); 
			 </c:when>
			 <c:when test="${'$DateID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(new java.util.Date()); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(false); 
			 </c:when>
			 <c:when test="${'$LongID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(new Long(1)); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(new Float(1.2)); 
			 </c:when>
				 <c:otherwise>
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>

	}

	// selenium.captureEntirePageScreenshot("C:/Documents and Settings/ayalama001c/Desktop/selenium.png",
	// "");
	@Test
	public void testCreateWidget() {
		selenium.click("//td[contains(text(), '${upper-case($packageName)}')]");
		selenium.click("//td[contains(text(), '${$class/@name}')]");
		waitforAjaxResponce();
		selenium.click("//div[contains(text(), 'Create ${$class/@name}')]");
		waitforAjaxResponce();
		selenium.type("//input[@title='name']", ${lower-case($class/@name)}.getName());
		selenium.type("//input[@title='description']", ${lower-case($class/@name)}
				.getDescription());
		selenium.click("//button[contains(text(), 'create')]");
		waitforAjaxResponce();
		assertTrue(selenium.isTextPresent("created"));

	}

	@Test
	public void testReadAllWidget() {
		selenium.click("//td[contains(text(), '${upper-case($packageName)}')]");
		selenium.click("//td[contains(text(), '${$class/@name}')]");
		waitforAjaxResponce();
		Number pages = selenium.getXpathCount("//option");
		for (Integer i = 1; i <= pages.intValue(); i++) {
			if (selenium.isElementPresent("//option[contains(text(),"
					+ i.toString() + ")]")) {
				selenium.select("//select", "label=" + i.toString() + "");
				waitforAjaxResponce();
				if (selenium.isTextPresent(${lower-case($class/@name)}.getName())) {
					assertTrue(selenium.isTextPresent(${lower-case($class/@name)}
							.getDescription()));
				}

			}
		}
	}


	public void waitFor(int seconds) {

		try {
			Thread.sleep(seconds * 1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void waitforAjaxResponce() {
		for (int second = 0;; second++) {
			if (second >= 60)
				break;
			try {
				if (!selenium.isTextPresent("Loading..."))
					return;
			} catch (Exception e) {
			}

			// Pause for 1 second.
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}

	@AfterClass
	public static void destroy() {
		selenium.stop();
	}
}
</java:format>