<java:format>
<c:setVariable select="$class/@xmi.id" var="classID"/>
package ${$packageName}.${lower-case($class/@name)};

	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			
  					  		 			<%-- check if it is abstract--%>
  					  		 			<c:if test="$class2/@isAbstract = 'true'">
  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.TreeAbstract${$class2/@name}Panel;
										</c:if> 
										<c:if test="$class2/@isAbstract = 'false'">
										import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Tree${$class2/@name}Panel;
										</c:if> 
										
	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
import info.yalamanchili.gwt.callback.ALAsyncCallback;
import info.yalamanchili.gwt.composite.CreateComposite;
import info.yalamanchili.gwt.rpc.GenericCRUDService.GenericCRUDServiceAsync;
import info.yalamanchili.gwt.widgets.ResponseStatusWidget;
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import ${$webPackage}${camelCase($projectName)}Welcome;
import info.yalamanchili.gwt.fields.DataType;

public class Create${$class/@name}Panel extends CreateComposite<${$class/@name}> {

public Create${$class/@name}Panel(CreateCompositeType type) {
	super(type);
		initCreateComposite(${$class/@name}.class.getName(), ${camelCase($projectName)}Welcome.constants);
	}
	


	@Override
	protected void createButtonClicked() {
		GenericCRUDServiceAsync.instance().create(entity,
				new ALAsyncCallback<${$class/@name}>() {
					public void onResponse(${$class/@name} arg0) {
						new ResponseStatusWidget().show("created");
					}
				});
	}

	@Override
	protected void addListeners() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void addWidgetsBeforeCaptionPanel() {
		// TODO Auto-generated method stub

	}

	@Override
	protected void addWidgets() {
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, DataType.FLOAT_FIELD); 
				 </c:when>
					 <c:otherwise>
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	}

	@Override
	protected ${$class/@name} populateEntityFromFields() {
		${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
		<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > ${lower-case($class/@name)}.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
				 <c:otherwise>
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>
		return ${lower-case($class/@name)};
	}
	
	@Override
	protected void configure() {

	}
	
	@Override
	protected void addButtonClicked() {
	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			
  					  		 			<%-- check if it is abstract--%>
  					  		 			<c:if test="$class2/@isAbstract = 'true'">
  					  		 			GenericCRUDServiceAsync.instance().merge(entity,
										TreeAbstract${$class2/@name}Panel.instance().getEntity(),
										new ALAsyncCallback<java.lang.Void>() {

										@Override
										public void onResponse(Void arg0) {
										new ResponseStatusWidget().show("added");
		
										}

										});
										</c:if> 
										<c:if test="$class2/@isAbstract = 'false'">
										GenericCRUDServiceAsync.instance().merge(entity,
										Tree${$class2/@name}Panel.instance().getEntity(),
										new ALAsyncCallback<java.lang.Void>() {

										@Override
										public void onResponse(Void arg0) {
										new ResponseStatusWidget().show("added");
		
										}

										});
										</c:if> 
										
	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
	}	

}
</java:format>