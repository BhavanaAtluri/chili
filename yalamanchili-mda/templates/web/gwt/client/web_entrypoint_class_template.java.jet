<java:format>
package ${$groupID}.client;

<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    		 <c:setVariable select="concat($webPackage,$package/@name)" var="packageName"/>	
    		 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <c:if test="$class/@isAbstract = 'false'">
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanel;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanel.${$class/@name}TableType;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.${$class/@name}SideBar;
    		 </c:if>	
			 </c:iterate>
	</c:iterate>

import com.allen_sauer.gwt.log.client.DivLogger;
import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.ui.RootLayoutPanel;
import com.google.gwt.user.client.ui.MenuBar;
import com.google.gwt.user.client.Command;
import ${$webPackage}internalization.${camelCase($projectName)}Constants;
import ${$webPackage}internalization.${camelCase($projectName)}Messages;
import ${$groupID}.entity.security.YUser;
import ${$groupID}.entity.security.YRole;
import com.google.gwt.user.client.ui.Widget;
import com.allen_sauer.gwt.log.client.DivLogger;
import com.google.gwt.user.client.ui.DockLayoutPanel;
import com.google.gwt.dom.client.Style.Unit;

import com.smartgwt.client.widgets.menu.IMenuButton;
import com.smartgwt.client.widgets.menu.Menu;
import com.smartgwt.client.widgets.menu.MenuItem;
import com.smartgwt.client.widgets.menu.events.ItemClickEvent;
import com.smartgwt.client.widgets.menu.events.ItemClickHandler;

import java.util.HashSet;
import java.util.Set;

public class ${camelCase($projectName)}Welcome extends RootPanels implements EntryPoint,ItemClickHandler {

	private static ${camelCase($projectName)}Welcome instance;
	
	public DockLayoutPanel mainPanel = new DockLayoutPanel(Unit.EM);
	public String user;
	public Set<Roles> roles = new HashSet<Roles>();
	
	public static ${camelCase($projectName)}Welcome instance(){
	if (instance == null) {
			return new ${camelCase($projectName)}Welcome();
		}
		return instance;
	}

	public static final ${camelCase($projectName)}Constants constants = (${camelCase($projectName)}Constants) GWT
			.create(${camelCase($projectName)}Constants.class);

	public static final ${camelCase($projectName)}Messages messages = (${camelCase($projectName)}Messages) GWT
			.create(${camelCase($projectName)}Messages.class);
			
	public void onModuleLoad() {
			Log.setUncaughtExceptionHandler();
			instance=this;
			addListeners();
			configure();
			RootLayoutPanel.get().add(mainPanel);
		}
		
		public void reLoad(YUser user) {
		RootLayoutPanel.get().clear();
		instance = null;
		this.user = user.getUsername();
		Set<Roles> roles = new HashSet<Roles>();
		for (YRole role : user.getRoles()) {
			roles.add(Roles.valueOf(role.getRolename().toUpperCase()));
		}
		this.roles = roles;
		Widget logger = ((DivLogger) Log.getLogger(DivLogger.class))
				.getWidget();

		RootLayoutPanel.get().add(logger);
		onModuleLoad();
	}
		
		protected void addListeners() {
		}

	protected void configure() {
		configureEntityPanel();
		configureStatusPanel();
		configureSideBarTop();
		configureSideBarBottom();
		configureSideBar();
		configureMainPanel();
		configureMenuBar();
	}
	
	protected void configureMainPanel() {
	/* the units addNorth(statusPanel, 3) represents the spacing need to play with values to get the right layout*/
		mainPanel.addNorth(statusPanel, 3);
		mainPanel.addNorth(menuBar, 2);
		mainPanel.addWest(sidePanel, 15);
		mainPanel.add(entityPanel);
		mainPanel.addStyleName("mainPanel");
	}
	
	protected void configureEntityPanel() {
		entityPanel.addStyleName("entityPanel");
	}

	protected void configureMenuBar() {
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
	Menu ${lower-case($package/@name)}Menu = new Menu();
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			 	<c:if test="$class/@isDependent = 'false'"> 
			 	MenuItem ${lower-case($class/@name)}MenuItem = new MenuItem("${$class/@name}");
			 	${lower-case($package/@name)}Menu.addItem(${lower-case($class/@name)}MenuItem);
				</c:if>
			 </c:iterate>
	${lower-case($package/@name)}Menu.addItemClickHandler(this);
	IMenuButton ${lower-case($package/@name)}Button = new IMenuButton("${upper-case($package/@name)}", ${lower-case($package/@name)}Menu);
	menuBar.add(${lower-case($package/@name)}Button);			  
	</c:iterate>
	}
	
	protected void configureStatusPanel() {
		statusPanel.addStyleName("statusPanel");
		statusPanel.add(new StatusPanel());
	}

	protected void configureSideBar() {
		sidePanel.addStyleName("sidePanel");
	}

	protected void configureSideBarTop() {
		sidePanel.add(sidePanelTop);
		sidePanelTop.addStyleName("sidePanelTop");
	}

	protected void configureSideBarBottom() {
		sidePanel.add(sidePanelBottom);
		sidePanelBottom.addStyleName("sidePanelBottom");
	}
	
	@Override
	public void onItemClick(ItemClickEvent event) {
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			 	<c:if test="$class/@isDependent = 'false'">  
					if (event.getItem().getTitle().equals("${$class/@name}")) {
					getEntityPanel().clear();
					getEntityPanel().add(new ReadAll${$class/@name}sPanel(${$class/@name}TableType.READALL));
					getSidePanelTop().clear();
					getSidePanelTop().add(new ${$class/@name}SideBar());
				}
				</c:if>
			 </c:iterate> 
	</c:iterate>
		}	
}
</java:format>