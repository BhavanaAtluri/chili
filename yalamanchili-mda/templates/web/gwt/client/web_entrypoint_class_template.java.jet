
<java:format>

package ${$groupID}.client;

<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    		 <c:setVariable select="concat($webPackage,$package/@name)" var="packageName"/>	
    		 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <c:if test="$class/@isAbstract = 'false'">
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanel;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanel.${$class/@name}TableType;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.${$class/@name}SideBar;
    		 </c:if>	
			 </c:iterate>
	</c:iterate>

import com.allen_sauer.gwt.log.client.DivLogger;
import com.allen_sauer.gwt.log.client.Log;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.ui.DockPanel;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.MenuBar;
import com.google.gwt.user.client.Command;
import ${$webPackage}internalization.${camelCase($projectName)}Constants;
import ${$webPackage}internalization.${camelCase($projectName)}Messages;
import ${$groupID}.entity.security.YUser;
import ${$groupID}.entity.security.YRole;
import com.google.gwt.user.client.ui.Widget;
import com.allen_sauer.gwt.log.client.DivLogger;

import java.util.HashSet;
import java.util.Set;

public class ${camelCase($projectName)}Welcome extends RootPanels implements EntryPoint {

	private static ${camelCase($projectName)}Welcome instance;
	
	public DockPanel mainPanel = new DockPanel();
	public String user;
	public Set<Roles> roles = new HashSet<Roles>();
	
	public static ${camelCase($projectName)}Welcome instance(){
	if (instance == null) {
			return new ${camelCase($projectName)}Welcome();
		}
		return instance;
	}

	public static final ${camelCase($projectName)}Constants constants = (${camelCase($projectName)}Constants) GWT
			.create(${camelCase($projectName)}Constants.class);

	public static final ${camelCase($projectName)}Messages messages = (${camelCase($projectName)}Messages) GWT
			.create(${camelCase($projectName)}Messages.class);
			
	public void onModuleLoad() {
			Log.setUncaughtExceptionHandler();
			instance=this;
			addListeners();
			configure();
			RootPanel.get().add(mainPanel);
		}
		
		public void reLoad(YUser user) {
		RootPanel.get().clear();
		instance = null;
		this.user = user.getUsername();
		Set<Roles> roles = new HashSet<Roles>();
		for (YRole role : user.getRoles()) {
			roles.add(Roles.valueOf(role.getRolename().toUpperCase()));
		}
		this.roles = roles;
		Widget logger = ((DivLogger) Log.getLogger(DivLogger.class))
				.getWidget();

		RootPanel.get().add(logger);
		onModuleLoad();
	}
		
		protected void addListeners() {
		}

	protected void configure() {
		configureEntityPanel();
		configureStatusPanel();
		configureSideBarTop();
		configureSideBarBottom();
		configureSideBar();
		configureMainPanel();
		configureMenuBar();
	}
	
	protected void configureMainPanel() {
		mainPanel.setBorderWidth(5);
		mainPanel.add(statusPanel, DockPanel.NORTH);
		mainPanel.add(menuBar, DockPanel.NORTH);
		mainPanel.add(sidePanel, DockPanel.WEST);
		mainPanel.add(entityPanel, DockPanel.CENTER);
		mainPanel.addStyleName("mainPanel");
	}
	
	protected void configureEntityPanel() {
		entityPanel.addStyleName("entityPanel");
	}

	protected void configureMenuBar() {
	menuBar.addStyleName("entityMenuBar");
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    MenuBar ${lower-case($package/@name)}Bar = new MenuBar(true);
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <%-- Flag varibles--%>
    		 <c:setVariable select="$class/@xmi.id" var="isComposite"/>
    		 <c:setVariable select="$class/@xmi.id" var="classID"/>
    		 <c:setVariable select="$class/@xmi.id" var="isParent"/>
    		 <c:if test="$class/@isAbstract = 'false'">
    		 <%-- process all associations to eliminate composite children--%>
					<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
						<c:iterate select="$association/Association.connection" var="association_connection">
							<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
								<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
							<%-- check is the association is corresponding to the class  --%>
										<c:if test="$association_connection_end_classID = $classID"> 
										
										
					  					   	<%-- iterate over the iterations ends  --%>
					  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
					  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
					  					  	 <c:if test="not($association_connection_end_classID2 = $classID)"> 
					  					  	 <%-- process only non compositions--%>
					  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
					  					  	 <%-- update flag variable--%>
					  					  	 <c:setVariable select="$class/@name" var="isComposite"/>
					  					  	 </c:if>
					  					 	  </c:if>	
					  					 	  </c:iterate>					 	 				 	  
										</c:if> 
																			
							</c:iterate>
						</c:iterate>
					</c:iterate>
			<%-- process all generizations to eliminate all parent classes--%>	
				<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization">
					<c:if test="$generalization/Generalization.parent/Class/@xmi.idref = $classID">
					<%-- update flag variable--%>
					<c:setVariable select="$class/@name" var="isParent"/>
					</c:if>															
				</c:iterate>	
			 <%-- check for flag varibles and add menu item class--%>	    		 
    		 <c:if test="$isComposite = $class/@xmi.id">
    		 <c:if test="$isParent = $class/@xmi.id">  
    		 	${lower-case($package/@name)}Bar.addItem("${$class/@name}", ${lower-case($class/@name)}Cmd);
			</c:if>
			</c:if>
			
			
			</c:if>
			 </c:iterate> 
			 
			 
	</c:iterate>

		MenuBar menu = new MenuBar();
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
		menu.addItem("${upper-case($package/@name)}", ${lower-case($package/@name)}Bar);
		</c:iterate>

		menuBar.add(menu);

	}
	
	protected void configureStatusPanel() {
		statusPanel.addStyleName("statusPanel");
		statusPanel.add(new StatusPanel());
	}

	protected void configureSideBar() {
		sidePanel.addStyleName("sidePanel");
	}

	protected void configureSideBarTop() {
		sidePanel.add(sidePanelTop);
		sidePanelTop.addStyleName("sidePanelTop");
	}

	protected void configureSideBarBottom() {
		sidePanel.add(sidePanelBottom);
		sidePanelBottom.addStyleName("sidePanelBottom");
		

	}
	

	
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    		 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <%-- Flag varibles--%>
    		 <c:setVariable select="$class/@xmi.id" var="isComposite"/>
    		 <c:setVariable select="$class/@xmi.id" var="classID"/>
    		 <c:setVariable select="$class/@xmi.id" var="isParent"/>
    		 <c:if test="$class/@isAbstract = 'false'">
    		 <%-- process all associations to eliminate composite children--%>
					<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
						<c:iterate select="$association/Association.connection" var="association_connection">
							<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
								<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
							<%-- check is the association is corresponding to the class  --%>
										<c:if test="$association_connection_end_classID = $classID"> 
										
										
					  					   	<%-- iterate over the iterations ends  --%>
					  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
					  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
					  					  	 <c:if test="not($association_connection_end_classID2 = $classID)"> 
					  					  	 <%-- process only non compositions--%>
					  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
					  					  	 <%-- update flag variable--%>
					  					  	 <c:setVariable select="$class/@name" var="isComposite"/>
					  					  	 </c:if>
					  					 	  </c:if>	
					  					 	  </c:iterate>					 	 				 	  
										</c:if> 
																			
							</c:iterate>
						</c:iterate>
					</c:iterate>
			<%-- process all generizations to eliminate all parent classes--%>	
				<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization">
					<c:if test="$generalization/Generalization.parent/Class/@xmi.idref = $classID">
					<%-- update flag variable--%>
					<c:setVariable select="$class/@name" var="isParent"/>
					</c:if>															
				</c:iterate>	
			 <%-- check for flag varibles and add menu item class--%>	    		 
    		 <c:if test="$isComposite = $class/@xmi.id">
    		 <c:if test="$isParent = $class/@xmi.id">  
    		 
    		 
    			Command ${lower-case($class/@name)}Cmd= new Command() {

				@Override
				public void execute() {
					getEntityPanel().clear();
					getEntityPanel().add(new ReadAll${$class/@name}sPanel(${$class/@name}TableType.READALL));
					getSidePanelTop().clear();
					getSidePanelTop().add(new ${$class/@name}SideBar());
				}

			};
			</c:if>
			</c:if>
			
			
			</c:if>
			 </c:iterate>
	</c:iterate>
	
	
	
	
	
}
</java:format>