<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$groupID}.client;

<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    		 <c:setVariable select="concat($webPackage,$package/@name)" var="packageName"/>	
    		 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <c:if test="$class/@isAbstract = 'false'">
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanel;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanel.${$class/@name}TableType;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.${$class/@name}SideBar;
    		 </c:if>	
			 </c:iterate>
	</c:iterate>
import info.yalamanchili.security.gwt.SecurityWelcome;
import info.yalamanchili.security.gwt.SecurityWelcome.CMD_TYPE;
import info.yalamanchili.security.gwt.YRole;
import info.yalamanchili.security.gwt.YUser;
import info.yalamanchili.security.gwt.user.UserSideBar;

import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.ui.RootLayoutPanel;
import com.google.gwt.user.client.ui.MenuBar;
import com.google.gwt.user.client.Command;
import ${$webPackage}internalization.${camelCase($projectName)}Constants;
import ${$webPackage}internalization.${camelCase($projectName)}Messages;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.ui.DockLayoutPanel;
import com.google.gwt.dom.client.Style.Unit;

import java.util.logging.Logger;
import java.util.HashSet;
import java.util.Set;
<f:message>generated.class.comment</f:message>
public class ${camelCase($projectName)}Welcome extends RootPanels implements EntryPoint {
<f:message>generated.comment</f:message>
	private static Logger logger = Logger.getLogger(${camelCase($projectName)}Welcome.class.getName());
<f:message>generated.comment</f:message>
	private static ${camelCase($projectName)}Welcome instance;
<f:message>generated.comment</f:message>	
	public DockLayoutPanel mainPanel = new DockLayoutPanel(Unit.EM);
<f:message>generated.comment</f:message>	
	public String user;
<f:message>generated.comment</f:message>	
	public static Set<String> roles = new HashSet<String>();
<f:message>generated.comment</f:message>	
	public static ${camelCase($projectName)}Welcome instance(){
	if (instance == null) {
			return new ${camelCase($projectName)}Welcome();
		}
		return instance;
	}
<f:message>generated.comment</f:message>
	public static ${camelCase($projectName)}Constants constants = (${camelCase($projectName)}Constants) GWT
			.create(${camelCase($projectName)}Constants.class);
<f:message>generated.comment</f:message>
	public static ${camelCase($projectName)}Messages messages = (${camelCase($projectName)}Messages) GWT
			.create(${camelCase($projectName)}Messages.class);
<f:message>generated.comment</f:message>			
	public void onModuleLoad() {
			GWT.setUncaughtExceptionHandler(new GWT.UncaughtExceptionHandler() {
			public void onUncaughtException(Throwable e) {
				logger.info(e.getLocalizedMessage());
			}
			});
			instance=this;
			addListeners();
			configure();
			RootLayoutPanel.get().add(mainPanel);
		}
<f:message>generated.comment</f:message>		
		public void reLoad(YUser user) {
		RootLayoutPanel.get().clear();
		instance = null;
		this.user = user.getUsername();
		for (YRole role : user.getRoles()) {
			roles.add(role.getRolename().toUpperCase());
		}
		logger.info(roles.toString());
		onModuleLoad();
	}
<f:message>generated.comment</f:message>		
		protected void addListeners() {
		}
<f:message>generated.comment</f:message>
	protected void configure() {
		configureEntityPanel();
		configureStatusPanel();
		configureSideBarTop();
		configureSideBarBottom();
		configureSideBar();
		configureMainPanel();
		configureMenuBar();
	}
<f:message>generated.comment</f:message>	
	protected void configureMainPanel() {
	/* the units addNorth(statusPanel, 3) represents the spacing need to play with values to get the right layout*/
		mainPanel.addNorth(statusPanel, 4);
		mainPanel.addNorth(menuBar, 2);
		mainPanel.addWest(sidePanel, 15);
		mainPanel.add(entityPanelHolder);
		mainPanel.addStyleName("mainPanel");
	}
<f:message>generated.comment</f:message>	
	protected void configureEntityPanel() {
		entityPanelHolder.add(entityPanel);
		entityPanelHolder.addStyleName("entityPanelHolder");
	}
	
<f:message>generated.comment</f:message>
	protected void configureMenuBar() {
	MenuBar menu = new MenuBar();
	
	menuBar.addStyleName("entityMenuBar");
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    MenuBar ${lower-case($package/@name)}Bar = new MenuBar(true);
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			 	<c:if test="$class/@isDependent = 'false'">  
    		 	${lower-case($package/@name)}Bar.addItem("${$class/@name}", ${lower-case($class/@name)}Cmd);
				</c:if>
			 </c:iterate> 
	</c:iterate>
	
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
		menu.addItem("${upper-case($package/@name)}", ${lower-case($package/@name)}Bar);
		</c:iterate>
		
		if (roles.contains("ADMIN")) {
			MenuBar adminBar = new MenuBar(true);
			adminBar.addItem("Users", userCmd);
			adminBar.addItem("Roles", roleCmd);
			// TODO check admin role
			menu.addItem("ADMIN", adminBar);
		}
					
		menuBar.add(menu);
	}
<f:message>generated.comment</f:message>
	protected void configureStatusPanel() {
		statusPanel.addStyleName("statusPanel");
		statusPanel.add(new StatusPanel());
	}
<f:message>generated.comment</f:message>
	protected void configureSideBar() {
		sidePanel.addStyleName("sidePanel");
	}
<f:message>generated.comment</f:message>
	protected void configureSideBarTop() {
		sidePanel.add(sidePanelTop);
		sidePanelTop.addStyleName("sidePanelTop");
	}
<f:message>generated.comment</f:message>
	protected void configureSideBarBottom() {
		sidePanel.add(sidePanelBottom);
		sidePanelBottom.addStyleName("sidePanelBottom");
		

	}
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			 	<c:if test="$class/@isDependent = 'false'">  
<f:message>generated.comment</f:message>			 	
    			Command ${lower-case($class/@name)}Cmd= new Command() {

				@Override
				public void execute() {
					getEntityPanel().clear();
					getEntityPanel().add(new ReadAll${$class/@name}sPanel(${$class/@name}TableType.READALL));
					getSidePanelTop().clear();
					getSidePanelTop().add(new ${$class/@name}SideBar());
				}

			};
				</c:if>
			 </c:iterate> 
	</c:iterate>
<f:message>generated.comment</f:message>	
	//USERS ADMIN	
		Command userCmd = new Command() {

		@Override
		public void execute() {
			new SecurityWelcome(CMD_TYPE.USER,getEntityPanel(), getSidePanelTop(),
					getSidePanelBottom());
		}

	};
	
<f:message>generated.comment</f:message>
	// ROLES ADMIN
	Command roleCmd = new Command() {

		@Override
		public void execute() {
			new SecurityWelcome(CMD_TYPE.ROLE, getEntityPanel(),
					getSidePanelTop(), getSidePanelBottom());
		}

	};	
}
</f:bundle>
</java:format>