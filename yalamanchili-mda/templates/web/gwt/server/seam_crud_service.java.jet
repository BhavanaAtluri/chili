<java:format>
package ${$groupID}.server;


import java.util.HashMap;
import java.util.Properties;

import javax.ejb.EJB;


import ${$groupID}.ejb.GenericServiceLocal;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			import ${$groupID}.ejb.${$package/@name}.${lower-case($class/@name)}.${$class/@name}ServiceLocal;
			import ${$groupID}.entity.${$package/@name}.${$class/@name};
			</c:iterate>
		</c:iterate>
import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jboss.seam.annotations.Create;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.remoting.WebRemote;
import info.yalamanchili.gwt.beans.TableObj;

@Name("info.yalamanchili.gwt.rpc.MyService")
public  class ServiceImpl implements info.yalamanchili.gwt.rpc.MyService  {

	protected HashMap<String, Object> ejbs = new HashMap<String, Object>();
	
	@In(create = true)
	protected GenericServiceLocal genericServiceBean;
	
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			@In(create = true)
			protected ${$class/@name}ServiceLocal ${lower-case($class/@name)}ServiceBean;
			</c:iterate>
		</c:iterate>
		
		@Create
		public void init() {
		initEJBMap();
		}
		
		
		protected void initEJBMap(){
		
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			ejbs.put(${$class/@name}.class.getCanonicalName(), ${lower-case($class/@name)}ServiceBean);
			</c:iterate>
		</c:iterate>
		
		
		}
		
		@WebRemote
	public String askIt(String question) {
		return "sample string return test";
	}

	@Override
	@WebRemote
	public <T extends Serializable> T create(T entity) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		T res = null;
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("create") == 0) {
				try {
					res = (T) method.invoke(ejb, entity);
				} catch (Exception e) {
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return res;
	}

	@Override
	@WebRemote
	public <T extends Serializable> void delete(T entity) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("delete") == 0) {
				try {
					method.invoke(ejb, entity);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}

	}

	@Override
	@WebRemote
	public <T extends Serializable> List<T> getEntities(T entity) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		List<T> res = null;
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("getEntities") == 0) {
				try {
					res = (List<T>) method.invoke(ejb, entity);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return res;
	}

	@Override
	@WebRemote
	public <T extends Serializable> List<String> getSuggestionsForName(
			String name, T entity) {
		return genericServiceBean.getSuggestionsForName(name, entity);
	}

	@Override
	@WebRemote
	public <T extends Serializable> T read(T entity, Long id) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		T res = null;
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("read") == 0) {
				try {
					res = (T) method.invoke(ejb, entity, id);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return res;
	}

	@Override
	@WebRemote
	public <T extends Serializable> T update(T entity) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		T res = null;
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("update") == 0) {
				try {
					res = (T) method.invoke(ejb, entity);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return res;
	}

	@Override
	@WebRemote
	public <T extends Serializable> List<T> getAllEntities(T entity) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		List<T> res = null;
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("getAllEntities") == 0) {
				try {
					res = (List<T>) method.invoke(ejb, entity);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return res;
	}

	@Override
	@WebRemote
	public <T extends Serializable> TableObj<T> getTableObj(T entity, int start) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		TableObj<T> res = null;
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("getTableObj") == 0) {
				try {
					res = (TableObj<T>) method.invoke(ejb, entity, start);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return res;
	}

	@Override
	@WebRemote
	public <T extends Serializable> List<T> getRelatedEntities(Long entityID,
			String sourceClass, T target) {
		// TODO Auto-generated method stub
		// return null;
		return genericServiceBean.getRelatedEntities(entityID,
				getEntityClass(sourceClass), target);
	}

	protected Class<?> getEntityClass(String className) {
		try {
			Class<?> entity = (Class<?>) Class.forName(className);
			return entity;
		} catch (ClassNotFoundException e) {
			throw new RuntimeException("class specified is not found", e);
		}
	}

	@Override
	@WebRemote
	public <T extends Serializable> void merge(T entity, T parent) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("merge") == 0) {
				try {
					method.invoke(ejb, entity, parent);
				} catch (Exception e) {
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}

	}

	@Override
	@WebRemote
	public <T extends Serializable> Map<Long, String> getListBoxValues(
			T entity, String[] columns) {
		Object ejb = ejbs.get(entity.getClass().getCanonicalName());
		Map<Long, String> values = new HashMap<Long, String>();
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("getListBoxValues") == 0) {
				try {
					values = (Map<Long, String>) method.invoke(ejb,
							(Object) columns);
				} catch (Exception e) {
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
		return values;
	}

	@Override
	@WebRemote
	public <T extends Serializable> void addAll(T parent, T child,
			List<Long> children) {
		Object ejb = ejbs.get(parent.getClass().getCanonicalName());
		for (Method method : ejb.getClass().getMethods()) {
			if (method.getName().compareToIgnoreCase("addAll") == 0) {
				try {
					method.invoke(ejb, parent, child, children);
				} catch (Exception e) {
					e.printStackTrace();
					throw new RuntimeException("Call failed");
				}
			}
		}
	}

}
</java:format>
