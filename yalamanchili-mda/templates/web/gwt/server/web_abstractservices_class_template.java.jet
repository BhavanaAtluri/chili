<java:format>
package ${$groupID}.server;


import info.yalamanchili.commons.JNDIUtils;
import info.yalamanchili.commons.PropertyFileLoader;

import java.util.HashMap;
import java.util.Properties;

import javax.ejb.EJB;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceUnit;
import javax.servlet.ServletException;

import net.sf.gilead.core.PersistentBeanManager;
import net.sf.gilead.core.hibernate.jboss.HibernateJBossUtil;
import net.sf.gilead.core.store.stateless.StatelessProxyStore;
import net.sf.gilead.gwt.PersistentRemoteService;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.jpa.injection.InjectedEntityManagerFactory;

		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			import ${$groupID}.ejb.${$package/@name}.${lower-case($class/@name)}.${$class/@name}ServiceLocal;
			import ${$groupID}.entity.${$package/@name}.${$class/@name};
			</c:iterate>
		</c:iterate>
		


public abstract class Abstract${camelCase($projectName)}Services extends PersistentRemoteService {

	private static final Log log = LogFactory.getLog(Abstract${camelCase($projectName)}Services.class);

	protected PersistentBeanManager beanManager = new PersistentBeanManager();
	protected static Properties ${$projectName}Properties = new Properties();
	protected HashMap<String, Object> ejbs = new HashMap<String, Object>();
	
	@PersistenceUnit(name = "${$projectName}")
	protected EntityManagerFactory emf;
	
	public EntityManagerFactory getEmf() {
		return emf;
	}

	public void setEmf(EntityManagerFactory emf) {
		this.emf = emf;
	}
	
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			@EJB(name = "${lower-case($class/@name)}")
			protected ${$class/@name}ServiceLocal ${lower-case($class/@name)}ServiceBean;
			</c:iterate>
		</c:iterate>
		
		public void init() throws ServletException {
		super.init();
		${$projectName}Properties = PropertyFileLoader
				.loadProperties("${$projectName}.properties");
		initGileadBeanManager();
		initEJBMap();
		}
		
		
		protected void initGileadBeanManager(){
		HibernateJBossUtil persistenceUtil = new HibernateJBossUtil();
		InjectedEntityManagerFactory iemf = (InjectedEntityManagerFactory) getEmf();
		persistenceUtil.setEntityManagerFactory(iemf);
		beanManager.setPersistenceUtil(persistenceUtil);
		beanManager.setProxyStore(new StatelessProxyStore());
		super.setBeanManager(beanManager);
		}
		
		protected void initEJBMap(){
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			ejbs.put(${$class/@name}.class.getCanonicalName(), ${lower-case($class/@name)}ServiceBean);
			</c:iterate>
		</c:iterate>
		
		
		}
		
		
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			<c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			protected ${$class/@name}ServiceLocal get${$class/@name}ServiceBean(){
			return ${lower-case($class/@name)}ServiceBean;
			}
			
			protected void set${$class/@name}ServiceBean( ${$class/@name}ServiceLocal  ${lower-case($class/@name)}ServiceBean){
			this.${lower-case($class/@name)}ServiceBean=${lower-case($class/@name)}ServiceBean;
			}
			</c:iterate>
		</c:iterate>
	
}
</java:format>
